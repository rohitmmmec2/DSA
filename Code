using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LinkedListDemo
{
    class Program
    {
        static void Main(string[] args)
        {
            LinkedList linkedList = new LinkedList();
            linkedList.head = null;
            int[] arr = { 5, 7, 11, 3 };

            //LinkList Creation
            Console.WriteLine("LinkList Creation============");
            for (int i=0; i< arr.Length; i++)
            {
                linkedList.head= linkedList.CreateNode(linkedList.head, arr[i]);
                linkedList.Print(linkedList.head);
            }

            //LinkList InsertAtPosition
            Console.WriteLine("LinkList InsertAtPosition============");
            linkedList.head = linkedList.InsertAtPosition(linkedList.head, 3, 111);
            linkedList.Print(linkedList.head);

            //LinkList PrintRecursiveForwardDirection
            Console.WriteLine("LinkList Print Recursive Forward Direction============");
            Console.WriteLine("Linked List:");
            linkedList.PrintRecursiveForwardDirection(linkedList.head);
            Console.WriteLine("\n");

            //LinkList PrintRecursiveReverseDirection
            Console.WriteLine("LinkList Print Recursive Reverse Direction============");
            Console.WriteLine("Linked List:");
            linkedList.PrintRecursiveReverseDirection(linkedList.head);
            Console.WriteLine("\n");

            // reverse a list using recursion
            Console.WriteLine("reverse a list using recursion============");
            linkedList.ReverseListRecursive(ref linkedList.head, linkedList.head);
            linkedList.Print(linkedList.head);

            // reverse a list using iteration
            Console.WriteLine("reverse a list using iteration============");
            linkedList.head = linkedList.ReverseListIteration(linkedList.head);
            linkedList.Print(linkedList.head);
            Console.ReadLine();
        }
    }

    public class LinkedList
    {
        public Node head;
        public Node CreateNode(Node head, int data)
        {
            Node newNode = new Node();
            newNode.data = data;
            newNode.next = head;
            head = newNode;
            return head;
        }
        public Node ReverseListIteration(Node head)
        {
            Node current = head;
            Node prev = null;
            Node next = null;
            while(current !=null)
            {
                next = current.next;
                current.next = prev;
                prev = current;
                current = next;
            }
            head = prev;
            return head;
        }

        public void ReverseListRecursive(ref Node head, Node p)
        {
            if(p.next==null)
            {
                head = p;
                return;
            }

            ReverseListRecursive(ref head, p.next);
            Node q = p.next;
            q.next = p;
            p.next = null;
        }

        public Node InsertAtPosition(Node head, int n, int data)
        {
            Node temp = head;
            for(int i=0; i < n-2; i++)
            {
                temp = temp.next;
            }

            Node newNode = new Node();
            newNode.data = data;
            newNode.next = temp.next;
            temp.next = newNode;
            return head;
        }

        public void PrintRecursiveForwardDirection(Node head)
        {
            if (head == null)
                return;
            Console.Write(head.data + " ");
            PrintRecursiveForwardDirection(head.next);
        }

        public void PrintRecursiveReverseDirection(Node head)
        {
            if (head == null)
                return;
            PrintRecursiveReverseDirection(head.next);
            Console.Write(head.data + " ");
        }
        public void Print(Node head)
        {
            Console.WriteLine("Linked List:");
            while(head !=null)
            {
                Console.Write(head.data + " ");
                head = head.next;
            }

            Console.WriteLine("\n");
        }

    }

    public class Node
    {
        public int data;
        public Node next;
    }
}
